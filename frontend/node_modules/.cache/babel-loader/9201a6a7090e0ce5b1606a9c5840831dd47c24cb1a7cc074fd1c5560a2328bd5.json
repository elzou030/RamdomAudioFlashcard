{"ast":null,"code":"var _jsxFileName = \"/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [songPath, setSongPath] = useState('');\n  const [songName, setSongName] = useState('');\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [audio, setAudio] = useState(null);\n  const [showSongName, setShowSongName] = useState(false);\n\n  // Function to generate a random flashcard (random song)\n  const generateFlashcard = async () => {\n    try {\n      const response = await fetch('http://localhost:5100/api/random-song');\n      if (response.ok) {\n        const data = await response.json();\n        setSongPath(`http://localhost:5100/${data.songPath}`); // Assuming you serve static files\n        setSongName(data.songName);\n        setShowPlayButton(true);\n        setShowSongName(false); // Hide song name initially\n      } else {\n        alert('No songs found');\n      }\n    } catch (error) {\n      console.error('Error fetching random song:', error);\n    }\n  };\n\n  // Play a 30-second segment of the random song starting from a random point\n  const playRandomSegment = () => {\n    if (!songPath) return;\n\n    // If an audio element already exists, pause it and set a new start time\n    if (audio) {\n      audio.pause();\n      // Calculate a random start time within the duration of the audio minus 30 seconds\n      const randomStartTime = Math.random() * (audio.duration - 30);\n      audio.currentTime = randomStartTime;\n      audio.play();\n\n      // Stop the song after 30 seconds\n      setTimeout(() => {\n        audio.pause();\n      }, 30000);\n    } else {\n      // Create a new Audio object if one doesn't exist\n      const audioElement = new Audio(songPath);\n      audioElement.addEventListener('loadedmetadata', () => {\n        // Set a random start time when metadata is loaded\n        const randomStartTime = Math.random() * (audioElement.duration - 30);\n        audioElement.currentTime = randomStartTime;\n        audioElement.play();\n\n        // Stop the song after 30 seconds\n        setTimeout(() => {\n          audioElement.pause();\n        }, 30000);\n      });\n\n      // Set the audio state to the new audio element\n      setAudio(audioElement);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Flashcard Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateFlashcard,\n      children: \"Generate Flashcard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), showPlayButton && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playRandomSegment,\n        children: \"Play Random 30 Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), showPlayButton && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowSongName(true),\n        children: \"Show Song Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), showSongName && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Song Name: \", songName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"dU/La58oxC/ZrYqNoQIVBEJKlx4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Home","_s","songPath","setSongPath","songName","setSongName","showPlayButton","setShowPlayButton","audio","setAudio","showSongName","setShowSongName","generateFlashcard","response","fetch","ok","data","json","alert","error","console","playRandomSegment","pause","randomStartTime","Math","random","duration","currentTime","play","setTimeout","audioElement","Audio","addEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/Home.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Home = () => {\n  const [songPath, setSongPath] = useState('');\n  const [songName, setSongName] = useState('');\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [audio, setAudio] = useState(null);\n  const [showSongName, setShowSongName] = useState(false);\n\n  // Function to generate a random flashcard (random song)\n  const generateFlashcard = async () => {\n    try {\n      const response = await fetch('http://localhost:5100/api/random-song');\n      if (response.ok) {\n        const data = await response.json();\n        setSongPath(`http://localhost:5100/${data.songPath}`);  // Assuming you serve static files\n        setSongName(data.songName);\n        setShowPlayButton(true);\n        setShowSongName(false);  // Hide song name initially\n      } else {\n        alert('No songs found');\n      }\n    } catch (error) {\n      console.error('Error fetching random song:', error);\n    }\n  };\n\n  // Play a 30-second segment of the random song starting from a random point\nconst playRandomSegment = () => {\n  if (!songPath) return;\n\n  // If an audio element already exists, pause it and set a new start time\n  if (audio) {\n    audio.pause();\n    // Calculate a random start time within the duration of the audio minus 30 seconds\n    const randomStartTime = Math.random() * (audio.duration - 30);\n    audio.currentTime = randomStartTime;\n    audio.play();\n\n    // Stop the song after 30 seconds\n    setTimeout(() => {\n      audio.pause();\n    }, 30000);\n  } else {\n    // Create a new Audio object if one doesn't exist\n    const audioElement = new Audio(songPath);\n    audioElement.addEventListener('loadedmetadata', () => {\n      // Set a random start time when metadata is loaded\n      const randomStartTime = Math.random() * (audioElement.duration - 30);\n      audioElement.currentTime = randomStartTime;\n      audioElement.play();\n\n      // Stop the song after 30 seconds\n      setTimeout(() => {\n        audioElement.pause();\n      }, 30000);\n    });\n\n    // Set the audio state to the new audio element\n    setAudio(audioElement);\n  }\n};\n\n  \n\n  return (\n    <div>\n      <h1>Welcome to the Flashcard Generator</h1>\n      <button onClick={generateFlashcard}>Generate Flashcard</button>\n\n      {showPlayButton && (\n        <div>\n          <button onClick={playRandomSegment}>Play Random 30 Seconds</button>\n        </div>\n      )}\n\n      {showPlayButton && (\n        <div>\n          <button onClick={() => setShowSongName(true)}>Show Song Name</button>\n        </div>\n      )}\n\n      {showSongName && <p>Song Name: {songName}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA,MAAMe,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;MACrE,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCd,WAAW,CAAC,yBAAyBa,IAAI,CAACd,QAAQ,EAAE,CAAC,CAAC,CAAE;QACxDG,WAAW,CAACW,IAAI,CAACZ,QAAQ,CAAC;QAC1BG,iBAAiB,CAAC,IAAI,CAAC;QACvBI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAE;MAC3B,CAAC,MAAM;QACLO,KAAK,CAAC,gBAAgB,CAAC;MACzB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACF,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAACnB,QAAQ,EAAE;;IAEf;IACA,IAAIM,KAAK,EAAE;MACTA,KAAK,CAACc,KAAK,CAAC,CAAC;MACb;MACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIjB,KAAK,CAACkB,QAAQ,GAAG,EAAE,CAAC;MAC7DlB,KAAK,CAACmB,WAAW,GAAGJ,eAAe;MACnCf,KAAK,CAACoB,IAAI,CAAC,CAAC;;MAEZ;MACAC,UAAU,CAAC,MAAM;QACfrB,KAAK,CAACc,KAAK,CAAC,CAAC;MACf,CAAC,EAAE,KAAK,CAAC;IACX,CAAC,MAAM;MACL;MACA,MAAMQ,YAAY,GAAG,IAAIC,KAAK,CAAC7B,QAAQ,CAAC;MACxC4B,YAAY,CAACE,gBAAgB,CAAC,gBAAgB,EAAE,MAAM;QACpD;QACA,MAAMT,eAAe,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIK,YAAY,CAACJ,QAAQ,GAAG,EAAE,CAAC;QACpEI,YAAY,CAACH,WAAW,GAAGJ,eAAe;QAC1CO,YAAY,CAACF,IAAI,CAAC,CAAC;;QAEnB;QACAC,UAAU,CAAC,MAAM;UACfC,YAAY,CAACR,KAAK,CAAC,CAAC;QACtB,CAAC,EAAE,KAAK,CAAC;MACX,CAAC,CAAC;;MAEF;MACAb,QAAQ,CAACqB,YAAY,CAAC;IACxB;EACF,CAAC;EAIC,oBACE/B,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CtC,OAAA;MAAQuC,OAAO,EAAE1B,iBAAkB;MAAAqB,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE9D/B,cAAc,iBACbP,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAQuC,OAAO,EAAEjB,iBAAkB;QAAAY,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CACN,EAEA/B,cAAc,iBACbP,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAQuC,OAAO,EAAEA,CAAA,KAAM3B,eAAe,CAAC,IAAI,CAAE;QAAAsB,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CACN,EAEA3B,YAAY,iBAAIX,OAAA;MAAAkC,QAAA,GAAG,aAAW,EAAC7B,QAAQ;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAACpC,EAAA,CAnFID,IAAI;AAAAuC,EAAA,GAAJvC,IAAI;AAqFV,eAAeA,IAAI;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}