{"ast":null,"code":"var _jsxFileName = \"/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/FolderManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FolderManager() {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [newFolder, setNewFolder] = useState('');\n  const [selectedFolder, setSelectedFolder] = useState('');\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  // Fetch the list of folders\n  const fetchFolders = async () => {\n    const response = await fetch('http://localhost:5100/api/folders');\n    const data = await response.json();\n    setFolders(data.folders);\n  };\n\n  // Fetch songs in the selected folder\n  const fetchSongs = async folderName => {\n    const response = await fetch(`http://localhost:5100/api/folders/${folderName}/songs`);\n    const data = await response.json();\n    setSongs(data.songs);\n    setSelectedFolder(folderName);\n  };\n\n  // Handle creating a new folder\n  const handleCreateFolder = async () => {\n    if (!newFolder) return;\n    const response = await fetch('http://localhost:5100/api/create-folder', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        folderName: newFolder\n      })\n    });\n    if (response.ok) {\n      alert('Folder created successfully');\n      setNewFolder('');\n      fetchFolders(); // Refresh folder list\n    } else {\n      alert('Failed to create folder');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Folders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Folder Name\",\n        value: newFolder,\n        onChange: e => setNewFolder(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateFolder,\n        children: \"Add Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: folders.map(folder => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => fetchSongs(folder),\n          children: folder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, folder, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), selectedFolder && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Songs in \", selectedFolder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: song\n        }, song, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(FolderManager, \"F92c/VkMEcmdBTQvy4qx5RMwpb4=\");\n_c = FolderManager;\nexport default FolderManager;\nvar _c;\n$RefreshReg$(_c, \"FolderManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FolderManager","_s","folders","setFolders","newFolder","setNewFolder","selectedFolder","setSelectedFolder","songs","setSongs","fetchFolders","response","fetch","data","json","fetchSongs","folderName","handleCreateFolder","method","headers","body","JSON","stringify","ok","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","folder","song","_c","$RefreshReg$"],"sources":["/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/FolderManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction FolderManager() {\n  const [folders, setFolders] = useState([]);\n  const [newFolder, setNewFolder] = useState('');\n  const [selectedFolder, setSelectedFolder] = useState('');\n  const [songs, setSongs] = useState([]);\n\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  // Fetch the list of folders\n  const fetchFolders = async () => {\n    const response = await fetch('http://localhost:5100/api/folders');\n    const data = await response.json();\n    setFolders(data.folders);\n  };\n\n  // Fetch songs in the selected folder\n  const fetchSongs = async (folderName) => {\n    const response = await fetch(`http://localhost:5100/api/folders/${folderName}/songs`);\n    const data = await response.json();\n    setSongs(data.songs);\n    setSelectedFolder(folderName);\n  };\n\n  // Handle creating a new folder\n  const handleCreateFolder = async () => {\n    if (!newFolder) return;\n\n    const response = await fetch('http://localhost:5100/api/create-folder', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ folderName: newFolder }),\n    });\n\n    if (response.ok) {\n      alert('Folder created successfully');\n      setNewFolder('');\n      fetchFolders();  // Refresh folder list\n    } else {\n      alert('Failed to create folder');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Folders</h2>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"New Folder Name\"\n          value={newFolder}\n          onChange={(e) => setNewFolder(e.target.value)}\n        />\n        <button onClick={handleCreateFolder}>Add Folder</button>\n      </div>\n      <ul>\n        {folders.map(folder => (\n          <li key={folder}>\n            <span onClick={() => fetchSongs(folder)}>{folder}</span>\n          </li>\n        ))}\n      </ul>\n\n      {selectedFolder && (\n        <div>\n          <h3>Songs in {selectedFolder}</h3>\n          <ul>\n            {songs.map(song => (\n              <li key={song}>{song}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FolderManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}