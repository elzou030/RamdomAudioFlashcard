{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst path = require('path');\nconst fs = require('fs');\n\n// Get all songs from all folders and return a random one\nrouter.get('/random-song', (req, res) => {\n  const uploadsDir = path.join(__dirname, '../uploads');\n\n  // Get all folders in the uploads directory\n  fs.readdir(uploadsDir, (err, folders) => {\n    if (err) {\n      return res.status(500).json({\n        message: 'Error reading folders'\n      });\n    }\n    let allSongs = [];\n\n    // Iterate over each folder and get the songs\n    folders.forEach(folder => {\n      const folderPath = path.join(uploadsDir, folder);\n      const songs = fs.readdirSync(folderPath).filter(file => !fs.statSync(path.join(folderPath, file)).isDirectory());\n      const fullPathSongs = songs.map(song => path.join(folderPath, song));\n      allSongs = allSongs.concat(fullPathSongs);\n    });\n\n    // If no songs are found, return an error\n    if (allSongs.length === 0) {\n      return res.status(404).json({\n        message: 'No songs found'\n      });\n    }\n\n    // Pick a random song\n    const randomSong = allSongs[Math.floor(Math.random() * allSongs.length)];\n    res.status(200).json({\n      songPath: randomSong,\n      songName: path.basename(randomSong)\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","path","fs","get","req","res","uploadsDir","join","__dirname","readdir","err","folders","status","json","message","allSongs","forEach","folder","folderPath","songs","readdirSync","filter","file","statSync","isDirectory","fullPathSongs","map","song","concat","length","randomSong","Math","floor","random","songPath","songName","basename","module","exports"],"sources":["/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/FolderManager.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst path = require('path');\nconst fs = require('fs');\n\n// Get all songs from all folders and return a random one\nrouter.get('/random-song', (req, res) => {\n  const uploadsDir = path.join(__dirname, '../uploads');\n  \n  // Get all folders in the uploads directory\n  fs.readdir(uploadsDir, (err, folders) => {\n    if (err) {\n      return res.status(500).json({ message: 'Error reading folders' });\n    }\n\n    let allSongs = [];\n\n    // Iterate over each folder and get the songs\n    folders.forEach(folder => {\n      const folderPath = path.join(uploadsDir, folder);\n      const songs = fs.readdirSync(folderPath).filter(file => !fs.statSync(path.join(folderPath, file)).isDirectory());\n      const fullPathSongs = songs.map(song => path.join(folderPath, song));\n      allSongs = allSongs.concat(fullPathSongs);\n    });\n\n    // If no songs are found, return an error\n    if (allSongs.length === 0) {\n      return res.status(404).json({ message: 'No songs found' });\n    }\n\n    // Pick a random song\n    const randomSong = allSongs[Math.floor(Math.random() * allSongs.length)];\n    res.status(200).json({ songPath: randomSong, songName: path.basename(randomSong) });\n  });\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAI,CAAC;;AAExB;AACAC,MAAM,CAACI,GAAG,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvC,MAAMC,UAAU,GAAGL,IAAI,CAACM,IAAI,CAACC,SAAS,EAAE,YAAY,CAAC;;EAErD;EACAN,EAAE,CAACO,OAAO,CAACH,UAAU,EAAE,CAACI,GAAG,EAAEC,OAAO,KAAK;IACvC,IAAID,GAAG,EAAE;MACP,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;IAEA,IAAIC,QAAQ,GAAG,EAAE;;IAEjB;IACAJ,OAAO,CAACK,OAAO,CAACC,MAAM,IAAI;MACxB,MAAMC,UAAU,GAAGjB,IAAI,CAACM,IAAI,CAACD,UAAU,EAAEW,MAAM,CAAC;MAChD,MAAME,KAAK,GAAGjB,EAAE,CAACkB,WAAW,CAACF,UAAU,CAAC,CAACG,MAAM,CAACC,IAAI,IAAI,CAACpB,EAAE,CAACqB,QAAQ,CAACtB,IAAI,CAACM,IAAI,CAACW,UAAU,EAAEI,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAAC;MAChH,MAAMC,aAAa,GAAGN,KAAK,CAACO,GAAG,CAACC,IAAI,IAAI1B,IAAI,CAACM,IAAI,CAACW,UAAU,EAAES,IAAI,CAAC,CAAC;MACpEZ,QAAQ,GAAGA,QAAQ,CAACa,MAAM,CAACH,aAAa,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,IAAIV,QAAQ,CAACc,MAAM,KAAK,CAAC,EAAE;MACzB,OAAOxB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;;IAEA;IACA,MAAMgB,UAAU,GAAGf,QAAQ,CAACgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGlB,QAAQ,CAACc,MAAM,CAAC,CAAC;IACxExB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEqB,QAAQ,EAAEJ,UAAU;MAAEK,QAAQ,EAAElC,IAAI,CAACmC,QAAQ,CAACN,UAAU;IAAE,CAAC,CAAC;EACrF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFO,MAAM,CAACC,OAAO,GAAGvC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}