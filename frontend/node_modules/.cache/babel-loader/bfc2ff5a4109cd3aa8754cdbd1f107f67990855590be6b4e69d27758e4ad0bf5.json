{"ast":null,"code":"var _jsxFileName = \"/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [songPath, setSongPath] = useState('');\n  const [songName, setSongName] = useState('');\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [audio, setAudio] = useState(null);\n  const [showSongName, setShowSongName] = useState(false);\n\n  // Function to generate a random flashcard (random song)\n  const generateFlashcard = async () => {\n    try {\n      const response = await fetch('http://localhost:5100/api/random-song');\n      if (response.ok) {\n        const data = await response.json();\n        setSongPath(`http://localhost:5100/${data.songPath}`); // Assuming you serve static files\n        setSongName(data.songName);\n        setShowPlayButton(true);\n        setShowSongName(false); // Hide song name initially\n      } else {\n        alert('No songs found');\n      }\n    } catch (error) {\n      console.error('Error fetching random song:', error);\n    }\n  };\n\n  // Play a 30-second segment of the random song\n  const playRandomSegment = () => {\n    if (!songPath) return;\n    // Stop any currently playing audio before starting a new one\n    if (audio) {\n      audio.pause();\n    }\n    const audioElement = new Audio(songPath);\n    audioElement.play();\n    setAudio(audioElement);\n\n    // Stop the song after 30 seconds\n    setTimeout(() => {\n      audioElement.pause();\n    }, 30000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Flashcard Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateFlashcard,\n      children: \"Generate Flashcard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), showPlayButton && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playRandomSegment,\n        children: \"Play Random 30 Seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), showPlayButton && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowSongName(true),\n        children: \"Show Song Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), showSongName && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Song Name: \", songName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"dU/La58oxC/ZrYqNoQIVBEJKlx4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Home","_s","songPath","setSongPath","songName","setSongName","showPlayButton","setShowPlayButton","audio","setAudio","showSongName","setShowSongName","generateFlashcard","response","fetch","ok","data","json","alert","error","console","playRandomSegment","pause","audioElement","Audio","play","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/Home.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Home = () => {\n  const [songPath, setSongPath] = useState('');\n  const [songName, setSongName] = useState('');\n  const [showPlayButton, setShowPlayButton] = useState(false);\n  const [audio, setAudio] = useState(null);\n  const [showSongName, setShowSongName] = useState(false);\n\n  // Function to generate a random flashcard (random song)\n  const generateFlashcard = async () => {\n    try {\n      const response = await fetch('http://localhost:5100/api/random-song');\n      if (response.ok) {\n        const data = await response.json();\n        setSongPath(`http://localhost:5100/${data.songPath}`);  // Assuming you serve static files\n        setSongName(data.songName);\n        setShowPlayButton(true);\n        setShowSongName(false);  // Hide song name initially\n      } else {\n        alert('No songs found');\n      }\n    } catch (error) {\n      console.error('Error fetching random song:', error);\n    }\n  };\n\n  // Play a 30-second segment of the random song\n  const playRandomSegment = () => {\n    if (!songPath) return;\n    // Stop any currently playing audio before starting a new one\n    if (audio) {\n      audio.pause();\n    }\n    \n    const audioElement = new Audio(songPath);\n    audioElement.play();\n\n    setAudio(audioElement);\n\n    // Stop the song after 30 seconds\n    setTimeout(() => {\n      audioElement.pause();\n    }, 30000);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to the Flashcard Generator</h1>\n      <button onClick={generateFlashcard}>Generate Flashcard</button>\n\n      {showPlayButton && (\n        <div>\n          <button onClick={playRandomSegment}>Play Random 30 Seconds</button>\n        </div>\n      )}\n\n      {showPlayButton && (\n        <div>\n          <button onClick={() => setShowSongName(true)}>Show Song Name</button>\n        </div>\n      )}\n\n      {showSongName && <p>Song Name: {songName}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}