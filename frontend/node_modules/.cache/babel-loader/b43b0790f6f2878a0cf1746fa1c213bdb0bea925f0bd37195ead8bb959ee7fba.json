{"ast":null,"code":"var _jsxFileName = \"/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/FolderManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FolderManager = () => {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [newFolder, setNewFolder] = useState('');\n  const [selectedFolder, setSelectedFolder] = useState('');\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  // Fetch the list of folders\n  const fetchFolders = async () => {\n    const response = await fetch('http://localhost:5100/api/folders');\n    const data = await response.json();\n    setFolders(data.folders);\n  };\n\n  // Fetch songs in the selected folder\n  const fetchSongs = async folderName => {\n    const response = await fetch(`http://localhost:5100/api/folders/${folderName}/songs`);\n    const data = await response.json();\n    setSongs(data.songs);\n    setSelectedFolder(folderName);\n  };\n\n  // Handle creating a new folder\n  const handleCreateFolder = async () => {\n    if (!newFolder) {\n      alert(\"Please enter a folder name\");\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5100/api/create-folder', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          folderName: newFolder\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        alert(data.message); // Notify the user about success\n        setNewFolder(''); // Clear the input field\n        fetchFolders(); // Refresh the folder list\n      } else {\n        const error = await response.json();\n        alert(error.message); // Display any error message\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      alert('Failed to create folder');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Folders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Folder Name\",\n        value: newFolder,\n        onChange: e => setNewFolder(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateFolder,\n        children: \"Add Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: folders.map(folder => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => fetchSongs(folder),\n        children: folder\n      }, folder, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), selectedFolder && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Songs in \", selectedFolder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: song\n        }, song, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(FolderManager, \"F92c/VkMEcmdBTQvy4qx5RMwpb4=\");\n_c = FolderManager;\nexport default FolderManager;\nvar _c;\n$RefreshReg$(_c, \"FolderManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FolderManager","_s","folders","setFolders","newFolder","setNewFolder","selectedFolder","setSelectedFolder","songs","setSongs","fetchFolders","response","fetch","data","json","fetchSongs","folderName","handleCreateFolder","alert","method","headers","body","JSON","stringify","ok","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","folder","song","_c","$RefreshReg$"],"sources":["/Users/elvazou/Downloads/RamdomAudioFlashcard/frontend/src/components/FolderManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst FolderManager = () => {\n  const [folders, setFolders] = useState([]);\n  const [newFolder, setNewFolder] = useState('');\n  const [selectedFolder, setSelectedFolder] = useState('');\n  const [songs, setSongs] = useState([]);\n\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  // Fetch the list of folders\n  const fetchFolders = async () => {\n    const response = await fetch('http://localhost:5100/api/folders');\n    const data = await response.json();\n    setFolders(data.folders);\n  };\n\n  // Fetch songs in the selected folder\n  const fetchSongs = async (folderName) => {\n    const response = await fetch(`http://localhost:5100/api/folders/${folderName}/songs`);\n    const data = await response.json();\n    setSongs(data.songs);\n    setSelectedFolder(folderName);\n  };\n\n  // Handle creating a new folder\n  const handleCreateFolder = async () => {\n    if (!newFolder) {\n      alert(\"Please enter a folder name\");\n      return;\n    }\n\n    try {\n      const response = await fetch('http://localhost:5100/api/create-folder', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ folderName: newFolder }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        alert(data.message);  // Notify the user about success\n        setNewFolder('');     // Clear the input field\n        fetchFolders();       // Refresh the folder list\n      } else {\n        const error = await response.json();\n        alert(error.message);  // Display any error message\n      }\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      alert('Failed to create folder');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Folders</h2>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"New Folder Name\"\n          value={newFolder}\n          onChange={(e) => setNewFolder(e.target.value)}\n        />\n        <button onClick={handleCreateFolder}>Add Folder</button>\n      </div>\n      <ul>\n        {folders.map(folder => (\n          <li key={folder} onClick={() => fetchSongs(folder)}>\n            {folder}\n          </li>\n        ))}\n      </ul>\n\n      {selectedFolder && (\n        <div>\n          <h3>Songs in {selectedFolder}</h3>\n          <ul>\n            {songs.map(song => (\n              <li key={song}>{song}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FolderManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}