{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function UploadSong(_ref){let{setSongFilename}=_ref;const[file,setFile]=useState(null);const[error,setError]=useState('');// Handle the file selection from the file input\nconst handleFileChange=e=>{setFile(e.target.files[0]);setError('');// Reset error state on file change\nconsole.log('Selected file:',e.target.files[0]);// Log selected file\n};// Handle the file upload to the backend\nconst handleUpload=async()=>{if(!file){alert('Please select a song to upload');console.error('No file selected');// Log if no file is selected\nreturn;}const formData=new FormData();formData.append('file',file);try{console.log('Uploading file:',file);// Log the file before upload\nconst response=await fetch('http://localhost:5000/api/upload',{method:'POST',body:formData});if(response.ok){const data=await response.json();alert(data.message);setSongFilename(file.name);// Set the filename in the parent component\nconsole.log('Upload successful:',data);// Log success response\n}else{const data=await response.json();setError(data.message||'Upload failed');console.error('Upload failed:',data);// Log failure response\n}}catch(error){console.error('Error during file upload:',error);// Log any caught errors\nsetError('Failed to upload the file');}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Upload a Song\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:handleFileChange,accept:\"audio/*\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleUpload,children:\"Upload Song\"}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error})]});}export default UploadSong;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","UploadSong","_ref","setSongFilename","file","setFile","error","setError","handleFileChange","e","target","files","console","log","handleUpload","alert","formData","FormData","append","response","fetch","method","body","ok","data","json","message","name","children","type","onChange","accept","onClick","style","color"],"sources":["/Users/elvazou/Downloads/MusicFlashCard/frontend/src/components/UploadSong.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction UploadSong({ setSongFilename }) {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n\n  // Handle the file selection from the file input\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setError('');  // Reset error state on file change\n    console.log('Selected file:', e.target.files[0]);  // Log selected file\n  };\n\n  // Handle the file upload to the backend\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a song to upload');\n      console.error('No file selected');  // Log if no file is selected\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      console.log('Uploading file:', file);  // Log the file before upload\n\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        alert(data.message);\n        setSongFilename(file.name);  // Set the filename in the parent component\n        console.log('Upload successful:', data);  // Log success response\n      } else {\n        const data = await response.json();\n        setError(data.message || 'Upload failed');\n        console.error('Upload failed:', data);  // Log failure response\n      }\n    } catch (error) {\n      console.error('Error during file upload:', error);  // Log any caught errors\n      setError('Failed to upload the file');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload a Song</h2>\n      <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\n      <button onClick={handleUpload}>Upload Song</button>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n}\n\nexport default UploadSong;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,QAAS,CAAAC,UAAUA,CAAAC,IAAA,CAAsB,IAArB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CACrC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAEtC;AACA,KAAM,CAAAY,gBAAgB,CAAIC,CAAC,EAAK,CAC9BJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC1BJ,QAAQ,CAAC,EAAE,CAAC,CAAG;AACfK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEJ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAG;AACrD,CAAC,CAED;AACA,KAAM,CAAAG,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CAACV,IAAI,CAAE,CACTW,KAAK,CAAC,gCAAgC,CAAC,CACvCH,OAAO,CAACN,KAAK,CAAC,kBAAkB,CAAC,CAAG;AACpC,OACF,CAEA,KAAM,CAAAU,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEd,IAAI,CAAC,CAE7B,GAAI,CACFQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAET,IAAI,CAAC,CAAG;AAEvC,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAE,CAC/DC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACR,CAAC,CAAC,CAEF,GAAIG,QAAQ,CAACI,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClCV,KAAK,CAACS,IAAI,CAACE,OAAO,CAAC,CACnBvB,eAAe,CAACC,IAAI,CAACuB,IAAI,CAAC,CAAG;AAC7Bf,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEW,IAAI,CAAC,CAAG;AAC5C,CAAC,IAAM,CACL,KAAM,CAAAA,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClClB,QAAQ,CAACiB,IAAI,CAACE,OAAO,EAAI,eAAe,CAAC,CACzCd,OAAO,CAACN,KAAK,CAAC,gBAAgB,CAAEkB,IAAI,CAAC,CAAG;AAC1C,CACF,CAAE,MAAOlB,KAAK,CAAE,CACdM,OAAO,CAACN,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CAAG;AACpDC,QAAQ,CAAC,2BAA2B,CAAC,CACvC,CACF,CAAC,CAED,mBACEP,KAAA,QAAA4B,QAAA,eACE9B,IAAA,OAAA8B,QAAA,CAAI,eAAa,CAAI,CAAC,cACtB9B,IAAA,UAAO+B,IAAI,CAAC,MAAM,CAACC,QAAQ,CAAEtB,gBAAiB,CAACuB,MAAM,CAAC,SAAS,CAAE,CAAC,cAClEjC,IAAA,WAAQkC,OAAO,CAAElB,YAAa,CAAAc,QAAA,CAAC,aAAW,CAAQ,CAAC,CAClDtB,KAAK,eAAIR,IAAA,MAAGmC,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAM,CAAE,CAAAN,QAAA,CAAEtB,KAAK,CAAI,CAAC,EAC9C,CAAC,CAEV,CAEA,cAAe,CAAAL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}